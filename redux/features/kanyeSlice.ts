import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import axios from "axios"
import type { RootState } from "../store"

//here we are typing the types for the state

export type KanyeState = {
  data: { quote: string }
  pending: boolean
  error: boolean
}

const initialState: KanyeState = {
  data: { quote: "click that button" },
  pending: false,
  error: false,
}

export const getKanyeQuote = createAsyncThunk("kanye/kanyeQuote", async () => {
  const res = await axios.get("https://api.kanye.rest/")
  return res.data
})

export const kanyeSlice = createSlice({
  name: "kanye",
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: (builder) => {
    builder
      .addCase(getKanyeQuote.pending, (state) => {
        state.pending = true
      })
      .addCase(getKanyeQuote.fulfilled, (state, { payload }) => {
        state.pending = false
        state.data = payload
      })
      .addCase(getKanyeQuote.rejected, (state) => {
        ;(state.pending = false), (state.error = true)
      })
  },
})

export const selectKanye = (state: RootState) => state.kanyeQuote
export default kanyeSlice.reducer

// https://www.merixstudio.com/blog/introduction-using-redux-toolkit-nextjs-and-typescript/
